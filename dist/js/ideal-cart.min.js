(function (w, d) {

    var idealCart = w.idealCart || function() {};
    w.idealCart = idealCart;

var _Util;

(function (_Util) {
    var Methods;
    (function (Methods) {
        Methods.ucfirst = function(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        };

    })(Methods = _Util.Methods || (_Util.Methods = {}));
})(_Util = idealCart._Util || (idealCart._Util = {}));


var __extends = this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }

        __.prototype = b.prototype;
        d.prototype = new __();
    };


/**
 * https://github.com/jeromeetienne/microevent.js/blob/master/microevent.js
 * @type {{bind: Function, unbind: Function, trigger: Function}}
 */
idealCart.prototype	= {
    bind	: function(event, fct){
        this._events = this._events || {};
        this._events[event] = this._events[event]	|| [];
        this._events[event].push(fct);
    },
    unbind	: function(event, fct){
        this._events = this._events || {};
        if( event in this._events === false  )	return;
        this._events[event].splice(this._events[event].indexOf(fct), 1);
    },
    trigger	: function(event /* , args... */){
        this._events = this._events || {};
        if( event in this._events === false  )	return;
        for(var i = 0; i < this._events[event].length; i++){
            this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
        }
    }
};

idealCart.prototype.items = [];
idealCart.prototype.addItem = addItem;
idealCart.prototype.getItem = getItem;
idealCart.prototype.hasItem = hasItem;
idealCart.prototype.getTotalUniqueItems = getTotalUniqueItems;
idealCart.prototype.getTotalItems = getTotalItems;


function addItem(item) {
    var _this = this;
    if(typeof item === "undefined" || item === null) {
        throw ("invalid item passed");
    }

   if(item instanceof idealCart.orderItem) {
       this.trigger('beforeAdd', item);
       console.log("obj passed");
       _this.items[item.get('id')] = item;
       this.trigger('afterAdd', item);

   } else if(typeof item === 'object') {
       item = new idealCart.orderItem(item);
       if(this.hasItem(item.get('id'))) {
           var i = this.getItem(item.get('id'));
           i.increment(item.get('quantity'));
       } else {
           _this.trigger('beforeAdd', item);
           _this.items.push(item);
           _this.trigger('afterAdd', item);
       }
   }
    return this;
}


function hasItem(id) {
    for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].get('id') === id) {
            return true;
        }
    }
    return false;
}

function getItem(id) {
    for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].get('id') === id) {
            return this.items[i];
        }
    }
    throw new Error("Item not found");
}

function removeItem(id) {

}

function toCurrency(price, symbol) {

}

/**
 *
 * @returns the total number of unique items
 */
function getTotalUniqueItems() {
    return this.items.length;
}

/**
 *
 * @returns {*}
 */
function getTotalItems() {
    var total = 0;
    for (var i = 0; i < this.items.length; i++) {
        total += this.items[i].get('quantity');
    }
    return total;
}

function getItems() {

}

function save() {
    this.trigger('beforeSave', this);

    this.trigger('afterSave', this);
}

function restore(id) {

}



var discount = function(discount) {
    var id, value, description;


}


idealCart.orderItem = function (options) {
    "use strict";
    var primitives=  ['id', 'code', 'name', 'description', 'price', 'quantity', 'tax', 'taxRate'];
    var data = {};
    data.options = {};
    data.discounts = [];
    var _this = this;

    this.setPrice = function(_price) {
        data['price'] = _price;
        return this;
    }

    this.setQuantity = function(_quantity) {
        data['quantity'] = _quantity;
    }

    function setAll(data) {
        if(typeof data === 'object'  && data !== null) {
            for (var k in data) {
                if (data.hasOwnProperty(k)) {
                    _this.set(k, data[k]);
                }
            }
        }
    }

    this.set = function(key, value) {
        key = key.toLowerCase();
        var idx = primitives.indexOf(key);

        var method = 'set' + idealCart._Util.Methods.ucfirst(key);
        if (typeof _this[method] !== 'undefined' && typeof _this[method] === 'function') {
            return _this[method](value);
        } else if (idx !== -1) {
            data[key] = value;
            return this;
        } else {
            data.options[key] = value;
            return this;
        }
    };

    this.get = function(key) {
        if(typeof data[key] !== "undefined") {
            return data[key];
        } else {
            throw new Error(key + " does not exist");
        }
    }

    this.increment = function(quantity) {
        if(typeof quantity !== "undefined") {
            data['quantity'] += quantity;
        } else {
            data['quantity']++;
        }

        return this;
    }

    this.decrement = function() {
        data['quantity']--;
        return this;
    }

    this.addDiscount = function(discount) {

    }

    this.serialize = function() {

    }

    this.unserialize = function() {

    }

    this.getTotalIncludingTax = function() {
        return this.getTotalExcludingTax()*this.getTotalTax();
    }

    this.getTotalExcludingTax = function() {
        return ((this.get('quantity')*this.get('price'))-this.getTotalDiscounts());
    }

    this.getTotalDiscounts = function() {
        return 0;
    }

    this.getTotalTax = function() {
        var tax;
        try {
            tax = this.get('tax');
            return tax;
        } catch (err) {
            try {
                var taxRate = this.get('taxRate')/100;
                return (this.getTotalExcludingTax()*taxRate)
            } catch(err) {
                return 0;
            }
        }

    }

    setAll(options);

};


idealCart.order = function () {

}






var shipping = function shipping(){
    var code, rate, description;
}

}(window, document));